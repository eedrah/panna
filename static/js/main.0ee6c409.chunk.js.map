{"version":3,"sources":["views/AppBar.tsx","services/notifications/notify.ts","views/Playlists.tsx","App.tsx","reportWebVitals.ts","services/notifications/initNotifications.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","AppBar","classes","className","position","Toolbar","IconButton","edge","color","aria-label","Menu","Typography","variant","Search","notify","body","Notification","Playlists","data","List","map","playlist","index","ListItem","role","undefined","dense","button","onClick","name","ListItemIcon","ListItemText","primary","secondary","ListItemSecondaryAction","exampleState","version","playlists","trigger","type","when","steps","App","state","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","requestPermission","result","catch","reason","console","error","initNotifications","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PASMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OA8BCK,EA1BA,WACb,IAAMC,EAAUV,IAEhB,OACE,qBAAKW,UAAWD,EAAQP,KAAxB,SACE,cAAC,IAAD,CAAWS,SAAS,SAApB,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLJ,UAAWD,EAAQL,WACnBW,MAAM,UACNC,aAAW,OAJb,SAME,cAACC,EAAA,EAAD,MAEF,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAWD,EAAQF,MAA5C,mBAGA,cAACM,EAAA,EAAD,CAAYG,aAAW,SAASF,KAAK,MAAMC,MAAM,UAAjD,SACE,cAACK,EAAA,EAAD,c,0EClCGC,EANA,SAACd,EAAee,GAC7B,IAAIC,aAAahB,EAAO,CACtBe,UCuDWE,EA3BG,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAChB,cAACC,EAAA,EAAD,CAAMhB,UAAW,eAAjB,SACGe,EAAKE,KAAI,SAACC,EAAUC,GACnB,OACE,eAACC,EAAA,EAAD,CAEEC,UAAMC,EACNC,OAAK,EACLC,QAAM,EACNC,QAAS,WACPd,EAAOO,EAASQ,KAAM,SAN1B,UASE,cAACC,EAAA,EAAD,UACE,cAAC,IAAD,MAEF,cAACC,EAAA,EAAD,CAAcC,QAASX,EAASQ,KAAMI,UAAU,mBAChD,cAACC,EAAA,EAAD,UACE,cAAC5B,EAAA,EAAD,CAAYC,KAAK,MAAME,aAAW,OAAlC,SACE,cAAC,IAAD,UAdCa,SC1BTa,G,MAAsB,CAC1BC,QAAS,QACTC,UAAW,CACT,CACER,KAAM,yBACNS,QAAS,CACPC,KAAM,WACNC,KAAM,WACNF,QAAS,iBAEXG,MAAO,CACL,CACEZ,KAAM,SACNX,KAAM,CAAC,YAuBFwB,EAPH,SAAC,GAAD,EAAGC,MAAH,OACV,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAWzB,KAAMiB,EAAaE,gBC3BnBO,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCPY,WACxB7B,aAAaqC,oBACVN,MAAK,SAACO,GACU,YAAXA,GACFxC,EAAO,oBAAqB,6CAG/ByC,OAAM,SAACC,GAAD,OAAYC,QAAQC,MAAMF,OCFrCG,GAEAC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BpB,M","file":"static/js/main.0ee6c409.chunk.js","sourcesContent":["import {\n  AppBar as MuiAppBar,\n  IconButton,\n  Toolbar,\n  Typography,\n} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Menu as MenuIcon, Search as SearchIcon } from '@material-ui/icons'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}))\n\nconst AppBar = () => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <MuiAppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Panna\n          </Typography>\n          <IconButton aria-label=\"search\" edge=\"end\" color=\"inherit\">\n            <SearchIcon />\n          </IconButton>\n        </Toolbar>\n      </MuiAppBar>\n    </div>\n  )\n}\nexport default AppBar\n","const notify = (title: string, body: string) => {\n  new Notification(title, {\n    body,\n    //icon: notifImg,\n  })\n}\nexport default notify\n","import {\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  ListItemText,\n  IconButton,\n} from '@material-ui/core'\nimport EditIcon from '@material-ui/icons/Edit'\nimport PlayIcon from '@material-ui/icons/PlayArrow'\nimport notify from '../services/notifications/notify'\n\nexport interface PlaylistState {\n  name: string\n  trigger?: {\n    type: 'DateTime' | 'WiFi' | 'Location'\n    when?: string // some representation of repeating times. Like cron, but hopefully better\n    trigger: 'Automatically' | 'Manually'\n  }\n  steps: Array<{\n    name: string\n    data: Array<number> // seconds\n    // more stuff to come from figma\n  }>\n}\n\nexport interface PlaylistsProps {\n  data: PlaylistState[]\n}\n\nconst Playlists = ({ data }: PlaylistsProps) => (\n  <List className={'classes.root'}>\n    {data.map((playlist, index) => {\n      return (\n        <ListItem\n          key={index}\n          role={undefined}\n          dense\n          button\n          onClick={() => {\n            notify(playlist.name, 'body')\n          }}\n        >\n          <ListItemIcon>\n            <PlayIcon />\n          </ListItemIcon>\n          <ListItemText primary={playlist.name} secondary=\"secondary text\" />\n          <ListItemSecondaryAction>\n            <IconButton edge=\"end\" aria-label=\"edit\">\n              <EditIcon />\n            </IconButton>\n          </ListItemSecondaryAction>\n        </ListItem>\n      )\n    })}\n  </List>\n)\nexport default Playlists\n","import AppBar from './views/AppBar'\nimport Playlists, { PlaylistState } from './views/Playlists'\nimport './App.css'\n\ninterface State {\n  version: string\n  playlists: PlaylistState[]\n}\n\nconst exampleState: State = {\n  version: '1.0.0',\n  playlists: [\n    {\n      name: 'Getting ready for work',\n      trigger: {\n        type: 'DateTime',\n        when: 'At 15:00',\n        trigger: 'Automatically',\n      },\n      steps: [\n        {\n          name: 'Shower',\n          data: [3600],\n        },\n      ],\n    },\n    // { name: 'Kickboxing routine' },\n    // { name: 'Supermarket shop' },\n    // { name: \"Walk to Grandma's\" },\n    // { name: 'Cook and eat dinner' },\n    // { name: 'Bussing to town' },\n  ],\n}\n\nexport interface AppProps {\n  state?: State\n}\n\nconst App = ({ state = exampleState }: AppProps) => (\n  <>\n    <AppBar />\n    <Playlists data={exampleState.playlists} />\n  </>\n)\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import notify from './notify'\n\nconst initNotifications = () =>\n  Notification.requestPermission()\n    .then((result) => {\n      if (result === 'granted') {\n        notify('Test notification', \"Here's what a notification looks like.\")\n      }\n    })\n    .catch((reason) => console.error(reason))\nexport default initNotifications\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport initNotifications from './services/notifications/initNotifications'\n\ninitNotifications()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}