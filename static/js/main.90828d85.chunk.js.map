{"version":3,"sources":["views/AppBar.tsx","services/audio/bell.ts","services/notifications/notify.ts","views/Playlists.tsx","App.tsx","reportWebVitals.ts","services/notifications/initNotifications.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","AppBar","classes","className","position","Toolbar","IconButton","edge","color","aria-label","Menu","Typography","variant","Search","context","AudioContext","ring","bellsRung","isRinging","stop","setTimeout","prepareToRing","oscillator","createOscillator","type","gain","createGain","connect","destination","value","exponentialRampToValueAtTime","currentTime","chimeLength","start","ringOnce","notify","body","onClose","notification","Notification","onclose","Playlists","data","List","map","playlist","index","ListItem","role","undefined","dense","button","onClick","stopBell","bell","name","ListItemIcon","ListItemText","primary","secondary","ListItemSecondaryAction","exampleState","version","playlists","trigger","when","steps","App","state","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initNotifications","requestPermission","result","catch","reason","console","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.90828d85.chunk.js","sourcesContent":["import {\n  AppBar as MuiAppBar,\n  IconButton,\n  Toolbar,\n  Typography,\n} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Menu as MenuIcon, Search as SearchIcon } from '@material-ui/icons'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}))\n\nconst AppBar = () => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <MuiAppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Panna\n          </Typography>\n          <IconButton aria-label=\"search\" edge=\"end\" color=\"inherit\">\n            <SearchIcon />\n          </IconButton>\n        </Toolbar>\n      </MuiAppBar>\n    </div>\n  )\n}\nexport default AppBar\n","const volume = 0.3\nconst chimeLength = 1000\nconst numberOfBellsInARow = 4\nconst shortBellGap = 150\nconst longBellGap = 1000 - shortBellGap * (numberOfBellsInARow - 1)\nconst maxLength = 60000\n\nconst context = new AudioContext()\n\nconst ringOnce = () => {\n  const oscillator = context.createOscillator()\n  oscillator.type = 'triangle'\n\n  const gain = context.createGain()\n  oscillator.connect(gain)\n  gain.connect(context.destination)\n  gain.gain.value = volume\n  gain.gain.exponentialRampToValueAtTime(\n    0.00001,\n    context.currentTime + chimeLength / 1000\n  )\n\n  oscillator.start(0)\n  setTimeout(() => oscillator.stop(), chimeLength * 2)\n}\n\nconst ring = () => {\n  let bellsRung = 0\n  let isRinging = true\n  const stop = () => {\n    isRinging = false\n  }\n  setTimeout(stop, maxLength)\n\n  const prepareToRing = () => {\n    if (!isRinging) {\n      return\n    }\n\n    ringOnce()\n    bellsRung++\n\n    setTimeout(\n      () => prepareToRing(),\n      bellsRung % numberOfBellsInARow === 0 ? longBellGap : shortBellGap\n    )\n  }\n\n  prepareToRing()\n  return stop\n}\n\nexport default ring\n","const notify = (title: string, body: string, onClose?: () => void) => {\n  const notification = new Notification(title, {\n    body,\n    //icon: notifImg,\n  })\n  if (onClose) {\n    notification.onclose = onClose\n  }\n}\nexport default notify\n","import {\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  ListItemText,\n  IconButton,\n} from '@material-ui/core'\nimport EditIcon from '@material-ui/icons/Edit'\nimport PlayIcon from '@material-ui/icons/PlayArrow'\nimport bell from '../services/audio/bell'\nimport notify from '../services/notifications/notify'\n\nexport interface PlaylistState {\n  name: string\n  trigger?: {\n    type: 'DateTime' | 'WiFi' | 'Location'\n    when?: string // some representation of repeating times. Like cron, but hopefully better\n    trigger: 'Automatically' | 'Manually'\n  }\n  steps: Array<{\n    name: string\n    data: Array<number> // seconds\n    // more stuff to come from figma\n  }>\n}\n\nexport interface PlaylistsProps {\n  data: PlaylistState[]\n}\n\nconst Playlists = ({ data }: PlaylistsProps) => (\n  <List className={'classes.root'}>\n    {data.map((playlist, index) => {\n      return (\n        <ListItem\n          key={index}\n          role={undefined}\n          dense\n          button\n          onClick={() => {\n            const stopBell = bell()\n            notify(playlist.name, 'body', stopBell)\n          }}\n        >\n          <ListItemIcon>\n            <PlayIcon />\n          </ListItemIcon>\n          <ListItemText primary={playlist.name} secondary=\"secondary text\" />\n          <ListItemSecondaryAction>\n            <IconButton edge=\"end\" aria-label=\"edit\">\n              <EditIcon />\n            </IconButton>\n          </ListItemSecondaryAction>\n        </ListItem>\n      )\n    })}\n  </List>\n)\nexport default Playlists\n","import AppBar from './views/AppBar'\nimport Playlists, { PlaylistState } from './views/Playlists'\nimport './App.css'\n\ninterface State {\n  version: string\n  playlists: PlaylistState[]\n}\n\nconst exampleState: State = {\n  version: '1.0.0',\n  playlists: [\n    {\n      name: 'Getting ready for work',\n      trigger: {\n        type: 'DateTime',\n        when: 'At 15:00',\n        trigger: 'Automatically',\n      },\n      steps: [\n        {\n          name: 'Shower',\n          data: [3600],\n        },\n      ],\n    },\n    // { name: 'Kickboxing routine' },\n    // { name: 'Supermarket shop' },\n    // { name: \"Walk to Grandma's\" },\n    // { name: 'Cook and eat dinner' },\n    // { name: 'Bussing to town' },\n  ],\n}\n\nexport interface AppProps {\n  state?: State\n}\n\nconst App = ({ state = exampleState }: AppProps) => (\n  <>\n    <AppBar />\n    <Playlists data={exampleState.playlists} />\n  </>\n)\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import notify from './notify'\n\nconst initNotifications = () =>\n  Notification.requestPermission()\n    .then((result) => {\n      if (result === 'granted') {\n        setTimeout(\n          () =>\n            notify(\n              'Test notification',\n              \"Here's what a notification looks like.\"\n            ),\n          5000\n        )\n      }\n    })\n    .catch((reason) => console.error(reason))\nexport default initNotifications\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport initNotifications from './services/notifications/initNotifications'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\n\ninitNotifications()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorkerRegistration.register()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}